require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe PostsController do
  render_views

  def mock_post(stubs = {})
    @mock_post ||= mock_model(Post, stubs).as_null_object
  end
  
  context "Unauthenticated user: " do
    it "should allow access to index" do
      get :index
      response.should be_success
    end
    
    it "should allow access to show a post" do
      Post.should_receive(:find).and_return(mock_post)
      get :show, :id => mock_post.id
      response.should be_success
    end
    
    it "should not allow access to make a new post" do
      get :new
      flash[:alert].should == "You need to sign in before continuing."
      response.should redirect_to("/users/sign_in")
    end
    
    it "should not allow access to create a post" do
      post :create
      flash[:alert].should == "You need to sign in before continuing."
      response.should redirect_to("/users/sign_in")
    end
    
    it "should not allow access to edit a post" do
      get :edit, :id => mock_post.id
      flash[:alert].should == "You need to sign in before continuing."
      response.should redirect_to("/users/sign_in")
    end
    
    it "should not allow access to update a post" do
      put :update, :id => mock_post.id
      flash[:alert].should == "You need to sign in before continuing."
      response.should redirect_to("/users/sign_in")
    end
    
    it "should not allow access to destroy a post" do
      delete :destroy, :id => mock_post.id
      flash[:alert].should == "You need to sign in before continuing."
      response.should redirect_to("/users/sign_in")
    end
  end
  
  context "Authenticated user: " do
    before(:each) do
      login
    end
    
    describe "GET index" do
      it "assigns all posts as @posts" do
        Post.stub(:all) { [mock_post] }
        get :index
        assigns(:posts).should eq([mock_post])
      end
    end

    describe "Tags wih counters" do
      let(:tag1) { FactoryGirl.create(:tag, :name => "Tag One") }
      let(:tag2) { FactoryGirl.create(:tag, :name => "Tag Two") }
      before do
	      post1 = FactoryGirl.create(:post, :title => "Post 1")
	      post2 = FactoryGirl.create(:post, :title => "Post 2")
	      post3 = FactoryGirl.create(:post, :title => "Post 3")
	      post1.tags << tag1
	      post2.tags << tag1
	      post3.tags << tag2
        get :index
      end

      it "displays the number of posts associated with each tag" do
        response.body.should have_selector(".tag_name", :text => "Tag One (2)")
        response.body.should have_selector(".tag_name", :text => "Tag Two (1)")
      end
    end

    describe "GET show" do
      it "assigns the requested post as @post" do
        Post.stub(:find).with("37") { mock_post }
        mock_post.should_receive(:listLikes)
        mock_post.should_receive(:listDislikes)
        get :show, :id => "37"
        assigns(:post).should be(mock_post)
      end
    end

    describe "GET new" do
      it "assigns a new post as @post" do
        Post.stub(:new) { mock_post }
        get :new
        assigns(:post).should be(mock_post)
      end
    end

    describe "GET edit" do
      it "assigns the requested post as @post" do
        Post.stub(:find).with("37") { mock_post }
        get :edit, :id => "37"
        assigns(:post).should be(mock_post)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "assigns a newly created post as @post" do
          Post.stub(:new).with({'these' => 'params'}) { mock_post(:save => true) }
          post :create, :post => {'these' => 'params'}
          assigns(:post).should be(mock_post)
        end

        it "redirects to the created post" do
          Post.stub(:new) { mock_post(:save => true) }
          post :create, :post => {}
          response.should redirect_to(post_url(mock_post))
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved post as @post" do
          Post.stub(:new).with({'these' => 'params'}) { mock_post(:save => false) }
          post :create, :post => {'these' => 'params'}
          assigns(:post).should be(mock_post)
        end

        it "re-renders the 'new' template" do
          Post.stub(:new) { mock_post(:save => false) }
          post :create, :post => {}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested post" do
          Post.stub(:find).with("37") { mock_post }
          mock_post.should_receive(:save)
          put :update, :id => "37", :post => {'these' => 'params'}
        end

        it "assigns the requested post as @post" do
          Post.stub(:find) { mock_post(:update_attributes => true) }
          put :update, :id => "1", :post => {}
          assigns(:post).should be(mock_post)
        end

        it "redirects to the post" do
          Post.stub(:find) { mock_post(:update_attributes => true) }
          put :update, :id => "1", :post => {}
          response.should redirect_to(post_url(mock_post))
        end
      end

      describe "with invalid params" do
        it "assigns the post as @post" do
          Post.stub(:find) { mock_post(:update_attributes => false) }
          put :update, :id => "1", :post => {}
          assigns(:post).should be(mock_post)
        end

        it "re-renders the 'edit' template" do
          Post.stub(:find) { mock_post(:save => false) }
          put :update, :id => "1", :post => {}
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested post" do
        Post.stub(:find).with("37") { mock_post }
        mock_post.should_receive(:destroy)
        delete :destroy, :id => "37"
      end

      it "redirects to the posts list" do
        Post.stub(:find) { mock_post }
        delete :destroy, :id => "1"
        response.should redirect_to(posts_url)
      end
    end
  end
end
